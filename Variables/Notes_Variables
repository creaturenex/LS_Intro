*Variables*
Variables are used to store information to be referenced and manipulated in a computer program.
They provide a way of labeling data with a descriptive name, so my programs can be understood more clearly by the reader and myself.
It is helpful to think of variables as containers that hold information. Their sole purpose is to label and store data in memory.
This data can then be used throughout your program.

When you assign a variable, you use the = symbol.
The name of the variable goes on the left and the value you want to store in the variable goes on the right.

Ex. 1:
irb :001 > first_name = 'Joe'
=> "Joe"

irb :002 > first_name
=> "Joe"


*Getting Data from a User*
Use the method *gets* which means "get string"
When you use it, the program waits for the user to
1) type in information and 2) press the enter key.

Ex. 2:
irb :001 > name = gets
Bob
=> "Bob\n"

The \n at the end is the "newline" character and represents the enter key.
put ".chomp" after any string to remove the carriage return characters at the end.

Ex. 3:
irb :001 > name = gets.chomp
Bob
=> "Bob"
irb :002 > name + ' is super great!'
=> "Bob is super great!"


*Variable Scope*
# I did not go over this in Codecademy, but I did go over blocks. They did not go over the concept I get it after reading it though.
A variable's scope determines where in a program a variable is available for use.
A variable's scope is defined by where the variable is initialized or created.
In Ruby, variable scope is defined by a block.
A block is a piece of code following a method invocation, usually delimited by either curly braces {} or do/end.
*Be aware that not all do/end pairs imply a block*.

Now that you have an idea of what constitutes a variable's scope, one rule that we want you to remember is this:

Inner scope can access variables initialized in an outer scope, but not vice versa.

Looking at some code will make this clearer. Let's say we have a file called scope.rb.
